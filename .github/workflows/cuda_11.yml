name: Build with CUDA 11.7.0

permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            cuda_sub_packages: '[]'
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
            cuda_sub_packages: '["nvcc", "toolkit"]'

    steps:
    - uses: actions/checkout@v3

    - name: Retrieve & Install CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.24
      id: cuda-toolkit
      with:
        cuda: '11.7.0'
        method: 'network'
        sub-packages: ${{ matrix.cuda_sub_packages }}
        log-file-suffix: '${{matrix.os}}.txt'

    - name: Retrieve & Install GDAL
      shell: bash
      run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update
              sudo apt-get install libgdal-dev
              echo "RELEASE_FILE_NAME=latest-main-linux.zip" >> $GITHUB_ENV
         elif [ "$RUNNER_OS" == "Windows" ]; then
              curl -o $GITHUB_WORKSPACE/osgeo4w-setup.exe https://download.osgeo.org/osgeo4w/v2/osgeo4w-setup.exe
              $GITHUB_WORKSPACE/osgeo4w-setup.exe -r -k -q -s https://download.osgeo.org/osgeo4w/v2/ -P gdal -P gdal-devel
              echo "RELEASE_FILE_NAME=latest-main-windows.zip" >> $GITHUB_ENV
         else
              echo "$RUNNER_OS not supported"
              exit 1
         fi

    - name: Configure CMake
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    - name: Create package
      if: runner.os == 'Linux'
      shell: bash
      run: |
        cd '${{ github.workspace }}'
        tar acvf ${{ env.RELEASE_FILE_NAME }} ./build/DSM_Occlusion

    - name: Create package
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd '${{ github.workspace }}'
        mkdir C:\build
        cp C:\OSGeo4W\bin\*.dll C:\build
        cp .\build\Release\DSM_Occlusion.exe C:\build
        Compress-Archive -Path C:\build\* -DestinationPath .\${{ env.RELEASE_FILE_NAME }}

    - name: Publish package
      shell: bash
      run: |  
        gh release delete-asset cuda-11 ${{ env.RELEASE_FILE_NAME }} || true
        gh release upload cuda-11 ${{ env.RELEASE_FILE_NAME }}
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
              